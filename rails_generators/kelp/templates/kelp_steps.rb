# kelp_steps.rb
#
# This file defines some generic step definitions that utilize the helper
# methods provided by Kelp. It is auto-generated by running:
#
#   script/generate kelp
#
# from a Rails application. It's probably a good idea to avoid editing this
# file, since it may be overwritten by an upgraded kelp gem later. If you
# find an issues with these step definitions and think they can be improved,
# please create an issue on Github:
#
#   http://github.com/wapcaplet/kelp/issues
#

require 'kelp'
World(Kelp::Visibility)
World(Kelp::Dropdown)
World(Kelp::Checkbox)

SHOULD_OR_NOT = /(should|should not)/
WITHIN = /(?: within "([^\"]+)")?/
STR = /([^\"]+)/

# Verify the presence or absence of multiple text strings in the page,
# or within a given context.
#
# With `should see`, fails if any of the strings are missing.
# With `should not see`, fails if any of the strings are present.
#
# `items` may be a Cucumber table, or a multi-line string. Examples:
#
#   Then I should see the following:
#     | First thing |
#     | Next thing |
#     | Last thing |
#
#   Then I should see the following:
#     """
#     First thing
#     Next thing
#     Last thing
#     """
#
Then /^I #{SHOULD_OR_NOT} see the following#{WITHIN}:$/ do |expect, selector, items|
  if items.class == Cucumber::Ast::Table
    strings = items.raw.flatten
  else
    strings = items.split(/[\r\n]+/)
  end
  if expect == 'should'
    should_see strings, :within => selector
  else
    should_not_see strings, :within => selector
  end
end


# Verify that one or more table rows containing the correct values exist (or do
# not exist). Rows do not need to match exactly, and fields do not need to be
# in the same order.
Then /^I #{SHOULD_OR_NOT} see (?:a table row|table rows)#{WITHIN} containing:$/ do |expect, selector, rows|
  rows.raw.each do |fields|
    if expect == 'should'
      should_see_in_same_row(fields, :within => selector)
    else
      should_not_see_in_same_row(fields, :within => selector)
    end
  end
end


# Verify that a dropdown has a given value selected. This verifies the visible
# value shown to the user, rather than the value attribute of the selected
# option element.
Then /^the "#{STR}" dropdown#{WITHIN} should equal "#{STR}"$/ do |dropdown, selector, value|
  dropdown_should_equal(dropdown, value, :within => selector)
end


# Verify that a dropdown includes or doesn't include the given value.
Then /^the "#{STR}" dropdown#{WITHIN} #{SHOULD_OR_NOT} include "#{STR}"$/ do |dropdown, selector, expect, value|
  if expect == 'should'
    dropdown_should_include(dropdown, value, :within => selector)
  else
    dropdown_should_not_include(dropdown, value, :within => selector)
  end
end


# Verify that a dropdown includes or doesn't include all values in the given table.
Then /^the "#{STR}" dropdown#{WITHIN} #{SHOULD_OR_NOT} include:$/ do |dropdown, selector, expect, values|
  values.raw.flatten.each do |value|
    if expect == 'should'
      dropdown_should_include(dropdown, value, :within => selector)
    else
      dropdown_should_not_include(dropdown, value, :within => selector)
    end
  end
end


# Verify that a given field is empty or nil
Then /^the "#{STR}" field#{WITHIN} should be empty$/ do |field, selector|
  with_scope(selector) do
    field_should_be_empty field
  end
end


# Verify multiple fields in a form, optionally restricted to a given selector.
# Fields may be text inputs or dropdowns
Then /^the fields#{WITHIN} should contain:$/ do |selector, fields|
  fields_should_contain_within(selector, fields.rows_hash)
end


# Verify that expected text exists or does not exist in the same row as
# identifier text. This can be used to ensure the presence or absence of "Edit"
# or "Delete" links, or specific data associated with a row in a table.
Then /^I #{SHOULD_OR_NOT} see "#{STR}" next to "#{STR}"#{WITHIN}$/ do |expect, expected, identifier, selector|
  with_scope(selector) do
    if expect == 'should'
      should_see_in_same_row [expected, identifier]
    else
      should_not_see_in_same_row [expected, identifier]
    end
  end
end


# Click a link in a table row that contains the given text.
# This can be used to click the "Edit" link for a specific record.
When /^I follow "#{STR}" next to "#{STR}"$/ do |link, identifier|
  click_link_in_row(link, identifier)
end


# Verify that a checkbox in a certain table row is checked or unchecked
Then /^the "#{STR}" checkbox next to "#{STR}"#{WITHIN} should be (checked|unchecked)$/ do |checkbox, text, selector, state|
  within(:xpath, xpath_row_containing(text)) do
    if state == 'checked'
      checkbox_should_be_checked(checkbox, :within => selector)
    else
      checkbox_should_not_be_checked(checkbox, :within => selector)
    end
  end
end

